LatexInComments (shortened *laic*) is an Emacs package that renders
$\LaTeX$ math blocks in code comments. It identifies math blocks
automatically and calls LaTeX under the hood to render them as images
and display them as overlays.

#+html: <p align="center"> <img src="laic_cpp_example.gif" width="75%" title"LaTeX in C++ comments"/> </p>

* Requirements

Should work out of the box in any Emacs programming mode that can
identify comments with the builtin elisp function *comment-beginning*,
and has been tested in C++, GLSL, Lua and elisp.

The only external requirements are:
- a [[https://www.latex-project.org/][LaTeX]] distribution that provides the *latex* command
- the *dvipng* commandline utility

It has only been tested with [[https://en.wikipedia.org/wiki/TeX_Live][TeX Live]] on Ubuntu and Windows10, but
should work with [[https://miktex.org/][MiKTeX]] and [[https://www.tug.org/mactex/][MacTeX]]. The *dvipng* utility may need to
be installed independently and customized (see *Customization*)

* Installation

At the moment *laic* can only be installed through direct
download. Just copy [[file:laic.el]] to your local lisp folder and require
it in your startup file.

The following elisp code adds a hook to all programming modes that
loads *laic* and sets up keybindings for the most relevant interactive
functions.
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook
   (function
    (lambda ()
     (require 'laic)
     ;; Create overlay for current or next visible latex block in a comment.
     (local-set-key (kbd "C-c C-x C-l") 'laic-create-overlay-from-latex-inside-or-forward)
     ;; Create overlays for all latex blocks in the current comment.
     (local-set-key (kbd "C-c c") 'laic-create-overlays-from-comment-inside-or-forward)
     ;; Remove all laic overlays
     (local-set-key (kbd "C-c r") 'laic-remove-overlays))))
#+END_SRC

* Usage

Interactive functions:
- *laic-create-overlay-from-comment-inside-or-forward*: Create overlay for current or next visible latex block in a comment.
- *laic-create-overlays-from-comment-inside-or-forward*: Create overlays for all latex blocks in the current comment.
- *laic-remove-overlays*: Remove all laic overlays.

* Customization

- *laic-block-delimiter-pairs*
- *laic-command-dvipng*: defaults to "dvipng".
- *laic-extra-packages*: additional packages can be added here (amsmath and amsfonts are included by default).
- *laic-output-dir*: temporary files are stored in this folder, relative to current file path.

* TODO Motivation
When writing math-heavy code it is often necessary to cite, show and
explain complex formulas. The most common options seem to be:
- Explaining math in plain text, often very verbosely.
- Using ad-hoc textual math, often ends up looking almost like
  code, just formatted differently.
- Citing formulas in source papers/books, maybe as hyperlinks,
  without showing them explicitly, which requires an extra step to
  understand the code.

Literate programming is a neat idea, but it's a radical/idealistic
approach that has its own set of drawbacks.

Augmenting comments to increase their expressiveness beyond plain text
seems a good compromise. LaTeX is reasonably easy to write and read,
and can be automatically parsed to display math as images beside code
itself.

This is a powerful idea, IMHO, but overusing it can be
counterproductive. Writing multi-page formulas in comments, or using
very complex notation, defining custom macros, etc, can make comments
verbose, harder to read in plain text, and harder to ignore when
focusing on code.

Personally I use it often for short math snippets, and sometimes for
longer derivations that are relevant enough to keep beside the code
itself. I try to keep formulas as simple as possible and "readable" in
plain text.

If you already typeset math in LaTeX in a paper or documentation, you
can copy relevant formulas directly to code comments.

** Design

The main inspiration is org-latex-preview, that allows displaying
inline math in org-mode buffers. only works in org-mode buffers by
default, requires additional latex packages, and is slower on the 1st
invocation.

*laic* prioritizes simplicity and speed over features:
- minimal dependencies: just latex + dvipng.
- easy setup: should work out of the box without customization.
- optimized for the most frequent use-case: toggling formulas on/off
  once while reading code/comments.

** Alternatives
*TODO* not sure this is all accurate, review, don't say anything that
 cannot be proved
- [[https://github.com/TobiasZawada/texfrag][texfrag]] is the only direct alternative I know of, more general and
  ambitious than *laic*, but also slower and harder to install.
- [[https://www.doxygen.nl/manual/formulas.html][Doxygen]] supports LaTex math wrapped in its custom "formula" tags,
  but only supports a handful of languages, imposes additional
  requirements on comment formatting, and involves a slow HTML
  generation step.
