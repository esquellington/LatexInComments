LatexInComments (shortened *laic*) is an Emacs package that renders
$\LaTeX$ math blocks in code comments. It identifies math blocks
automatically and calls LaTeX under the hood to render them as images
and display them as overlays.

#+html: <p align="center"> <img src="laic_cpp_example.gif" width="75%" title"LaTeX in C++ comments"/> </p>

* Usage

The package offers a few interactive functions that to show and hide
math blocks in comments:
- *laic-create-overlay-from-comment-inside-or-forward*: Create overlay
  for current or next visible latex block in a comment, relative to
  cursor position.
- *laic-create-overlays-from-comment-inside-or-forward*: Create
  overlays for all latex blocks in the current comment, relative to
  cursor position.
- *laic-remove-overlays*: Remove all laic overlays fromt the current buffer.
- *laic-remove-overlays-and-files*: Remove all laic overlays from he
  current and delete cached images from disk.

Images are generated on first "create" operation, and cached for fast
show/hide. They are only deleted when a buffer is closed or when
*laic-remove-overlays-and-files* is explicitly called.

* Requirements

Should work out of the box in any Emacs programming mode that can
identify comments with the builtin elisp function *comment-beginning*,
and has been tested in C++, GLSL, Lua and elisp.

The only external requirements are:
- A [[https://www.latex-project.org/][LaTeX]] distribution that provides the *latex* command. Tested with
  [[https://en.wikipedia.org/wiki/TeX_Live][TeX Live]] on Ubuntu and Windows10, but should work with [[https://miktex.org/][MiKTeX]] and
  [[https://www.tug.org/mactex/][MacTeX]] too.
- The *dvipng* commandline utility. May need to be installed
  independently and customized (see *Customization*)

* Installation

At the moment *laic* can only be installed through direct
download. Just copy [[file:laic.el]] to your local lisp folder, for
example:

#+BEGIN_SRC elisp
  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC

and require it somewhere in your init.el. The most convenient way is
to add a programming mode hook that loads *laic* and sets up
keybindings for the most relevant interactive functions:
#+BEGIN_SRC elisp
  (add-hook 'prog-mode-hook
   (function
    (lambda ()
     (require 'laic)
     ;; Create overlay for current or next visible latex block in a comment.
     (local-set-key (kbd "C-c C-x C-l") 'laic-create-overlay-from-latex-inside-or-forward)
     ;; Create overlays for all latex blocks in the current comment.
     (local-set-key (kbd "C-c C-x C-o") 'laic-create-overlays-from-comment-inside-or-forward)
     ;; Remove all laic overlays
     (local-set-key (kbd "C-c C-x o") 'laic-remove-overlays)
     ;; Remove all laic overlays and delete cache
     (local-set-key (kbd "C-c C-x r") 'laic-remove-overlays-and-files)
#+END_SRC

* Customization

A few options can be customized with (customize-group 'laic)
- *laic-block-delimiter-pairs*: list of balanced begin/end delimiter pairs.
- *laic-command-dvipng*: defaults to "dvipng".
- *laic-extra-packages*: additional packages can be added here (amsmath and amsfonts are included by default).
- *laic-output-dir*: temporary files are stored in this folder, relative to current file path.

* TODO Motivation
When writing math-heavy code it is often necessary to cite, show and
explain complex formulas. The most common options seem to be:
- Explaining math in plain text, often very verbosely.
- Using ad-hoc textual math, often ends up looking almost like
  code, just formatted differently.
- Citing formulas in source papers/books, maybe as hyperlinks,
  without showing them explicitly, which requires an extra step to
  understand the code.

I've used all these options in the past, and they're far from
optimal. On the other side, org-mode offers a very convenient way to
quickly preview inline LaTeX fragments ([[https://orgmode.org/manual/Previewing-LaTeX-fragments.html][org-latex-preview]]), and I
realized something similar in comments could be useful.

Augmenting code comments to increase their expressiveness beyond that
of plain text is a powerful idea, in my humble opinion. LaTeX math can
be considered a domain-specific language that is reasonably easy to
write and read. If you already typeset math in LaTeX elsewhere (ex: in
a paper, in documentation, in org-mode, etc...) you can copy easily
relevant formulas directly to code comments.

Personally I mostly use *laic* for short math snippets, and sometimes
for longer derivations that are relevant enough to keep beside the
code itself. I try to keep formulas as simple as possible and readable
in plain text, so that they remain useful even when *laic* is not
available.

Overall I'm really happy with the result. However, I find it important
to resist the temptation of overusing it. Writing multi-page formulas
in comments, relying on very complex notation, defining custom macros,
etc, is counter-productive, can make comments too verbose, harder to
read in plain text, and harder to ignore when focusing on code. More
so when collaborating with other programmers.

** Design

The main inspiration is org-latex-preview, that allows displaying
inline math in org-mode buffers. only works in org-mode buffers by
default, requires additional latex packages, and is somewhat slow on
the first invocation.

*laic* prioritizes simplicity and speed over features:
- minimal dependencies: just latex + dvipng.
- easy setup: should work out of the box without customization.
- optimized for the most frequent use-case: toggling formulas on/off
  once while reading code/comments.

** Alternatives
*TODO* not sure this is all accurate, review, don't say anything that
 cannot be proved
-  Is the main inspiration, essentially the same idea
  in org-mode.
- [[https://github.com/TobiasZawada/texfrag][texfrag]] is the only direct alternative I know of, more general and
  ambitious than *laic*, but also slower and harder to install, from
  my experience.
- [[https://www.doxygen.nl/manual/formulas.html][Doxygen]] supports LaTex math wrapped in its custom "formula" tags,
  but only supports a handful of languages, imposes additional
  requirements on comment formatting, and involves a slow HTML
  generation step.
- [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]] is a neat idea, but not remotely practical in
  many situations, such as large legacy codebases.
